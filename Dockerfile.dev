#==============================================================================
# BASE IMAGE 
# 
#==============================================================================
FROM python:3.10-slim-bullseye as base

# SET TIMEZONE
ENV TZ=America/Santiago

# Install BUILD_DEPS
ARG BUILD_DEPS="awscli tzdata sudo curl wget libssl1.1 libkrb5-3 zlib1g libicu[0-9][0-9] gnome-keyring libsecret-1-0 desktop-file-utils x11-utils git graphviz gnupg2 build-essential libssl-dev libffi-dev python3-dev swig libpulse-dev ffmpeg pulseaudio libasound2-dev"
RUN apt update \
    && apt-get install -y ${BUILD_DEPS} \
    && rm -rf /var/lib/apt/lists/* \
    # SET TIMEZONE
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone \
    # Install pipenv
    && pip install pipenv

# Creamos el usuario administrador de la app y nos aseguramos de que pueda ejecutar sudo
# Seteamos el nombre del usuario que usaremos en el container
# El comando para construir la imagen debe considerar el paso de los parametros uid y gid:
# docker build --build-arg UID=$(id -u) --build-arg GID=$(id -g) . -t <<image_name:tag>>
ARG USERNAME=appadmin
ARG UID=1000
ARG GID=1000
ENV UID=${UID}
ENV GID=${GID}

# Instala las dependencias del sistema operativo
RUN apt-get update && apt-get install -y \
    libzbar0 \
    libzbar-dev

# Instalar dependencias de Tkinter
RUN apt-get update \
    && apt-get install -y python3-tk


RUN groupadd -g $GID $USERNAME \
    && useradd -mr -u $UID -g $USERNAME $USERNAME \
    && groupmod --gid $GID $USERNAME \
    && usermod --uid $UID --gid $GID $USERNAME

RUN chown -R $UID:$GID /home/$USERNAME \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME
# remove cache
RUN apt-get purge --auto-remove -yqq $buildDeps \
    && apt-get autoremove -yqq --purge \
    && apt-get clean \
    && rm -rf \
    /var/lib/apt/lists/* \
    /tmp/* \
    /var/tmp/* \
    /usr/share/man \
    /usr/share/doc \
    /usr/share/doc-base



#==============================================================================
# DEVELOP IMAGE
# 
#==============================================================================
FROM base as develop_image

ARG USERNAME=appadmin
USER ${USERNAME}

# Esta variable de entorno hace que el directorio .venv creado por pipenv este en el directorio del proyecto
ENV PIPENV_VENV_IN_PROJECT=1

# creamos los directorios necesarios para la instalaci√≥n de las extensiones de vs code
RUN mkdir -p /home/${USERNAME}/app \
    /home/${USERNAME}/.vscode-server/extensions \
    /home/${USERNAME}/.vscode-server-insiders/extensions \
    && chown -R ${USERNAME} \
    /home/${USERNAME}/app \
    /home/${USERNAME}/.vscode-server \
    /home/${USERNAME}/.vscode-server-insiders

WORKDIR /home/${USERNAME}/app

RUN pip install --upgrade pip
COPY requirements.txt /home/${USERNAME}/requirements.txt
RUN pipenv install -r /home/${USERNAME}/requirements.txt

ENV PATH="/home/${USERNAME}/app/.venv/bin:${PATH}"